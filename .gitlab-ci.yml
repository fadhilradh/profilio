image: node:14-alpine

include:
  - project: wartek-id/tooling/cicd-templates
    file: stages.gitlab-ci.yml
    ref: master
  - project: wartek-id/tooling/cicd-templates
    file: job-template.gitlab-ci.yml
    ref: master
  - project: wartek-id/frontend-toolings/component-library
    file: library-tracker-template.gitlab-ci.yaml
    ref: main

workflow:
  rules:
    - if: '$CI_PIPELINE_SOURCE == "merge_request_event"'
    - if: '$CI_COMMIT_BRANCH && $CI_OPEN_MERGE_REQUESTS'
      when: never
    - if: '$CI_COMMIT_BRANCH'
    - if: '$CI_COMMIT_TAG'

variables:
  NODE_CACHE_DIR: $CI_PROJECT_DIR/node_modules/
  GITLAB_AUTH_TOKEN: $CI_JOB_TOKEN

download-repository-files:
  extends: .download-repository-files
  only:
    refs:
      - main
      - /release-.+/
  artifacts:
    paths:
      - k8s-deploy/

.cache_config: &cache_config
  cache:
    key:
      files:
        - yarn.lock
    paths:
      - $NODE_CACHE_DIR
    policy: pull

prepare:
  stage: before-ci
  script:
    - yarn install --frozen-lockfile
  rules:
    - changes:
        - yarn.lock
    - exists:
        - node_modules
      when: never
  cache:
    key:
      files:
        - yarn.lock
    paths:
      - $NODE_CACHE_DIR

###############
# BUILD STAGE #
###############
.build-app:
  <<: *cache_config
  stage: test
  tags:
    - himem
  script:
    - NEXT_PUBLIC_API_MOCKING=disabled yarn build
  artifacts:
    untracked: false
    expire_in: 12 hours
    paths:
      - .next
      - next.config.js
      - deployment/Dockerfile
      - public

build-app-staging:
  extends: .build-app
  variables:
    ENV: staging
    NODE_ENV: test
  only:
    refs:
      - main
      - /release-staging-.+/

build-app-production:
  extends: .build-app
  variables:
    ENV: production
    NODE_ENV: production
  except:
    refs:
      - main
      - /release-staging-.+/

#####################
# LINT & TEST STAGE #
#####################
lint:
  <<: *cache_config
  stage: test
  script:
    - yarn lint:script

test:
  <<: *cache_config
  stage: test
  coverage: /All files[^|]*\|[^|]*\s+([\d\.]+)/
  script:
    - yarn test:ci
  artifacts:
    when: always
    paths:
      - coverage
    reports:
      coverage_report:
        coverage_format: cobertura
        path: coverage/cobertura-coverage.xml
      junit: junit.xml

# 💣 Uncomment from line 115 to 205 if app is ready to deploy
# 📝 Don't forget to edit {YOUR_AWESOME_APP}

# ######################
# # BUILD DOCKER STAGE #
# ######################
# .build-docker:
#   <<: *cache_config
#   stage: build
#   image: docker:dind
#   tags:
#     - docker-build
#   script:
#     - docker login -u $CI_REGISTRY_USER -p "$(echo $CI_REGISTRY_PASSWORD | base64 -d)" $CI_REGISTRY
#     - docker build --build-arg GITLAB_AUTH_TOKEN=$CI_JOB_TOKEN --build-arg NODE_ENV=$NODE_ENV --build-arg API_MOCKING=$API_MOCKING --build-arg VERSION=$CI_COMMIT_SHA -t $CI_REGISTRY/$CI_PROJECT_PATH/$ENV:$CI_COMMIT_SHORT_SHA -f $DOCKERFILE .
#     - docker tag $CI_REGISTRY/$CI_PROJECT_PATH/$ENV:$CI_COMMIT_SHORT_SHA $CI_REGISTRY/$CI_PROJECT_PATH/$ENV:latest
#     - docker push $CI_REGISTRY/$CI_PROJECT_PATH/$ENV:$CI_COMMIT_SHORT_SHA
#     - docker push $CI_REGISTRY/$CI_PROJECT_PATH/$ENV:latest

# docker-build-staging:
#   extends: .build-docker
#   only:
#     refs:
#       - main
#       - /release-staging-.+/
#   dependencies:
#     - build-app-staging
#   variables:
#     ENV: staging
#     NODE_ENV: test
#     DOCKERFILE: deployment/Dockerfile

# docker-build-production:
#   extends: .build-docker
#   only:
#     refs:
#       - /release-production-.+/
#   dependencies:
#     - build-app-production
#   variables:
#     ENV: production
#     NODE_ENV: production
#     DOCKERFILE: deployment/Dockerfile

# ####################
# # DEPLOYMENT STAGE #
# ####################
# .deploy:
#   image: ${CI_REGISTRY}/deployment:v0.5.0
#   stage: deployment
#   dependencies:
#     - download-repository-files
#   variables:
#     KUBECONFIG_PATH: k8s-deploy/clusters/kubeconfig.yml
#     NAMESPACE: YOUR_AWESOME_APP
#   before_script:
#     - helm repo add wartek-helm-charts https://wartek-helm-charts.storage.googleapis.com
#     - helm repo update
#   script:
#     - |
#       helm upgrade --install YOUR_AWESOME_APP-fe wartek-helm-charts/k8s-service --version 0.1.3 \
#         --values deployment/${ENV}/values.yaml \
#         --set containerImage.repository=${CI_REGISTRY}/${CI_PROJECT_PATH}/${ENV} \
#         --set containerImage.tag=${CI_COMMIT_SHORT_SHA} \
#         --kubeconfig ${KUBECONFIG_PATH} \
#         --kube-context ${CLUSTER_NAME} \
#         --kube-token ${KUBERNETES_TOKEN} \
#         --namespace ${NAMESPACE}

# deploy-staging:
#   extends: .deploy
#   when: manual
#   variables:
#     ENV: staging
#     KUBERNETES_TOKEN: $KUBERNETES_TOKEN_STAGING
#     CLUSTER_NAME: staging-2
#   only:
#     refs:
#       - main
#       - /release-staging-.+/
#   tags:
#     - staging

# deploy-production:
#   extends: .deploy
#   variables:
#     ENV: production
#     KUBERNETES_TOKEN: $KUBERNETES_TOKEN_PRODUCTION
#     CLUSTER_NAME: production-2
#   only:
#     refs:
#       - /release-production-.+/
#   tags:
#     - production

# 💣 Uncomment line 209 to EOL if app will used and serve static assets from CDN
# 📝 Don't forget to update variable {BUCKET} value with your definition on terraform repo!

# ###########################
# # DEPLOYMENT ASSETS STAGE #
# ###########################
# .deploy-assets:
#   image: google/cloud-sdk:300.0.0-alpine
#   stage: deployment
#   variables:
#     PREFIX: _next/static/
#   script:
#     - gcloud auth activate-service-account --key-file $GOOGLE_APPLICATION_CREDENTIALS
#     - gsutil -m cp -r '.next/static/*' gs://${BUCKET}/${PREFIX}
#     - gsutil -m cp -r 'public/*' gs://${BUCKET}

# deploy-assets-staging:
#   extends: .deploy-assets
#   dependencies:
#     - build-app-staging
#   environment:
#     name: staging
#   variables:
#     BUCKET: YOUR_AWESOME_APP-static-staging
#   when: manual
#   only:
#     refs:
#       - main
#       - /release-staging-.+/

# deploy-assets-production:
#   extends: .deploy-assets
#   dependencies:
#     - build-app-production
#   environment:
#     name: production
#   variables:
#     BUCKET: YOUR_AWESOME_APP-static-production
#   when: manual
#   only:
#     refs:
#       - /release-production-.+/

# 📝 This stage is for send usage wartek library in the repo
# 📝 Don't forget to update variables `SQUAD` with your squad name and `TRIBE` with your tribe name
# 🚀 This is the end of the configuration. Happy hacking! 🚀
send-wartek-library-usage:
  <<: *cache_config
  extends: .tracker-library
  variables:
    SQUAD: design-system
    TRIBE: platform
